import numpy as np
import random
from TRANS.config import config
from mpmath import *
from math import exp, log2, log, ceil, sqrt
from scipy.stats import nbinom
from scipy import stats
from Compiler import mpc_math
class log_generator(object):
    
    def __init__(self, conf) -> None:
        self.n, self.m, self.lambd = conf.n, conf.num_party, conf.lambd
        self.partial_noise, self.output_path = conf.partial_noise, conf.output_path
        self.t = conf.sensitivity / conf.epsilon
        p = exp(1 / self.t)
        self.k = max(int(ceil(log2(self.t * ((self.lambd + 1 + log2(self.n)) - log2(1 + p)) * log(2)))),5)
        self.N = 2 ** self.k + 1

        self.u = self.lambd + ceil(log2(self.n))
        # self.u = 8
        print(f'fraction part {self.u}')
        print(f'k derived from allocating lambda to truncation: {self.k}')
        print(f'mod clip N: {self.N}')
        
        sfix.set_precision(self.u, self.k + self.u)
        self.sfixu = sfix
        self.sbk = sbitint.get_type(self.k)
    
    def get_sfix_random(self):
        uniform_list = Array(self.n, self.sfixu)
        @for_range(self.n)
        def _(i):
            uniform_list[i] = self.sfixu(0)
        for i in range(3):
            for j in range(self.n):
                uniform_list[j] = uniform_list[j] ^ sfix.get_input_from(i)
                uniform_list[j] = self.sfixu(random.random())
                print_ln("%s", uniform_list[j].reveal())
        return  uniform_list
    
    def round(self, a):
        abit = a.bit_decompose()
        intpart = self.sbk.bit_compose(abit[self.u:])
        return intpart
    
    def log_transformation(self, uniform_list1, uniform_list2):
        dlap = Array(self.n, self.sbk)
        # @for_range(self.n)
        # def _(i):
        #     a = mpc_math.log_fx(uniform_list1[i], exp(1)) 
        #     b = mpc_math.log_fx(uniform_list2[i], exp(1)) 
        #     print_ln("u:%s, a:%s", uniform_list1[i].reveal(), a.reveal())
        #     dlap[i] = self.round(self.t * a) - self.round(self.t * b)
        #     print_ln("get lap: %s",dlap[i].reveal())
        return dlap
    
    def generate_dlap(self):
        uniform_list1 = self.get_sfix_random()
        uniform_list2 = self.get_sfix_random()
        dlap = self.log_transformation(uniform_list1, uniform_list2)
        return dlap


def partial_randomness(path, n, m, u):
    for i in range(m):
        file = path + str(i) + '-0'
        print(file)
        with open(file, 'w') as f:
            for j in range(n):
                a = random.random()
                f.write(f'%.{u}f ' % a)
        f.close()

    pass

import sys
config.lambd = int(sys.argv[4])
config.n = int(sys.argv[5])
config.epsilon = float(sys.argv[6])


generator = log_generator(config)
partial_randomness(config.output_path, config.n*10, config.num_party, generator.u)
generator.generate_dlap()


